{"version":3,"sources":["Context.js","withContext.js","components/CartItem.js","components/Cart.js","components/ProductItem.js","components/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","withContext","WrappedComponent","props","Consumer","context","CartItem","cartItem","cartKey","product","amount","className","src","alt","shortDesc","style","textTransform","name","price","onClick","removeFromCart","cart","cartKeys","Object","keys","length","map","key","clearCart","checkout","ProductItem","description","distance","addToCart","id","products","index","stripePromise","loadStripe","App","state","stock","localStorage","setItem","JSON","stringify","setState","cartItemId","removeItem","a","stripe","totalWeight","maxDistance","values","forEach","element","quantity","currency","weight","push","data","fetch","method","headers","body","response","json","session","redirectToCheckout","sessionId","error","routerRef","createRef","getItem","axios","url","query","then","result","parse","console","log","Provider","value","this","ref","role","aria-label","class","aria-expanded","data-target","e","preventDefault","showMenu","aria-hidden","to","marginLeft","exact","path","component","ProductList","Cart","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f33445c2.chunk.js","sourcesContent":["import React from \"react\";\nconst Context = React.createContext({});\nexport default Context;\n","import React from \"react\";\nimport Context from \"./Context\";\n\nconst withContext = WrappedComponent => {\n  const WithHOC = props => {\n    return (\n      <Context.Consumer>\n        {context => <WrappedComponent {...props} context={context} />}\n      </Context.Consumer>\n    );\n  };\n\n  return WithHOC;\n};\n\nexport default withContext;\n","import React from \"react\";\n\nconst CartItem = props => {\n  const { cartItem, cartKey } = props;\n\n  const { product, amount } = cartItem;\n  return (\n    <div className=\" column is-half\">\n      <div className=\"box\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-64x64\">\n              <img\n                src=\"https://bulma.io/images/placeholders/128x128.png\"\n                alt={product.shortDesc}\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <b style={{ textTransform: \"capitalize\" }}>\n              {product.name}{\" \"}\n              <span className=\"tag is-primary\">{product.price} â‚¬</span>\n            </b>\n            <div>{product.shortDesc}</div>\n            <small>{`${amount} dans le panier`}</small>\n          </div>\n          <div\n            className=\"media-right\"\n            onClick={() => props.removeFromCart(cartKey)}\n          >\n            <span className=\"delete is-large\"></span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n","import React from \"react\";\nimport withContext from \"../withContext\";\nimport CartItem from \"./CartItem\";\n\nconst Cart = props => {\n  const { cart } = props.context;\n  const cartKeys = Object.keys(cart || {});\n  return (\n    <>\n      <div className=\"hero is-primary\">\n        <div className=\"hero-body container\">\n          <h4 className=\"title\">Mon Panier</h4>\n        </div>\n      </div>\n      <br />\n      <div className=\"container\">\n        {cartKeys.length ? (\n          <div className=\"column columns is-multiline\">\n            {cartKeys.map(key => (\n              <CartItem\n                cartKey={key}\n                key={key}\n                cartItem={cart[key]}\n                removeFromCart={props.context.removeFromCart}\n              />\n            ))}\n            <div className=\"column is-12 is-clearfix\">\n              <br />\n              <div className=\"is-pulled-right\">\n                <button\n                  onClick={props.context.clearCart}\n                  className=\"button is-warning \"\n                >\n                  Vider le panier\n                </button>{\" \"}\n                <button\n                  className=\"button is-success\"\n                  onClick={props.context.checkout}\n                >\n                  Payer\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"column\">\n            <div className=\"title has-text-grey-light\">La panier est vide</div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default withContext(Cart);\n","import React from \"react\";\n\nconst ProductItem = props => {\n  const { product } = props;\n  return (\n    <div className=\" column is-half\">\n      <div className=\"box\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-64x64\">\n              <img\n                src=\"https://bulma.io/images/placeholders/128x128.png\"\n                alt={product.name}\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <b style={{ textTransform: \"capitalize\" }}>\n              {product.name}{\" \"}\n              <span className=\"tag is-primary\">{product.price} â‚¬</span>\n            </b>\n            <div>{product.description}</div>\n            <small>{product.distance + \" km de transport\"}</small>\n\n            <div className=\"is-clearfix\">\n              <button\n                className=\"button is-small is-outlined is-primary   is-pulled-right\"\n                onClick={() =>\n                  props.addToCart({\n                    id: product.name,\n                    product,\n                    amount: 1\n                  })\n                }\n              >\n                Ajouter au panier\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductItem;\n","import React from \"react\";\nimport ProductItem from \"./ProductItem\";\nimport withContext from \"../withContext\";\n\nconst ProductList = props => {\n  const { products } = props.context;\n\n  return (\n    <>\n      <div className=\"hero is-primary\">\n        <div className=\"hero-body container\">\n          <h4 className=\"title\">Liste des articles</h4>\n        </div>\n      </div>\n      <br />\n      <div className=\"container\">\n        <div className=\"column columns is-multiline\">\n          {products && products.length ? (\n            products.map((product, index) => (\n              <ProductItem\n                product={product}\n                key={index}\n                addToCart={props.context.addToCart}\n              />\n            ))\n          ) : (\n            <div className=\"column\">\n              <span className=\"title has-text-grey-light\">\n                Aucun article en vente\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default withContext(ProductList);\n","import React, { Component } from \"react\";\r\nimport { Switch, Route, Link, BrowserRouter as Router } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\nimport Cart from './components/Cart';\r\nimport ProductList from './components/ProductList';\r\n\r\nimport Context from \"./Context\";\r\n\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n\r\nconst stripePublicKey = \"pk_test_51IWMLVB0L4ACn1yoUBuG6Jj0jkAJaAlLQgBFAKdnKmZ0JfATQS8WUu1vzumMSn4s51qna2ySfZKXixShegVTQs3C009jzw7NF3\"\r\nconst stripePromise = loadStripe(stripePublicKey);\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cart: {},\r\n      products: []\r\n    };\r\n    this.routerRef = React.createRef();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let cart = localStorage.getItem(\"cart\");\r\n\r\n    axios({\r\n      url: 'https://us-central1-marketplace-info802.cloudfunctions.net/graphql ',\r\n      method: 'post',\r\n      data: {\r\n        query: `\r\n        query {\r\n          products {\r\n            name,\r\n            description,\r\n            price,\r\n            weight,\r\n            distance\r\n          }\r\n        }\r\n          `\r\n      }\r\n    }).then((result) => {\r\n      cart = cart ? JSON.parse(cart) : {};\r\n      console.log(result.data.data.products)\r\n\r\n      this.setState({ products: result.data.data.products, cart });\r\n    });\r\n\r\n  }\r\n\r\n\r\n  addToCart = cartItem => {\r\n    let cart = this.state.cart;\r\n    if (cart[cartItem.id]) {\r\n      cart[cartItem.id].amount += cartItem.amount;\r\n    } else {\r\n      cart[cartItem.id] = cartItem;\r\n    }\r\n    if (cart[cartItem.id].amount > cart[cartItem.id].product.stock) {\r\n      cart[cartItem.id].amount = cart[cartItem.id].product.stock;\r\n    }\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    this.setState({ cart });\r\n  };\r\n\r\n  removeFromCart = cartItemId => {\r\n    let cart = this.state.cart;\r\n    delete cart[cartItemId];\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\r\n    this.setState({ cart });\r\n  };\r\n\r\n  clearCart = () => {\r\n    let cart = {};\r\n    localStorage.removeItem(\"cart\");\r\n    this.setState({ cart });\r\n  };\r\n\r\n  checkout = async () => {\r\n\r\n    const stripe = await stripePromise;\r\n\r\n    \r\n    var products = [];\r\n    var totalWeight = 0;\r\n    var maxDistance = 0;\r\n    Object.values(this.state.cart).forEach(element => {\r\n      var product = {};\r\n      product.name = element.id;\r\n      product.amount = element.product.price * 100; //Le prix est en centimes d'euros pour stripe\r\n      product.quantity = element.amount;\r\n      product.currency = 'eur';\r\n      totalWeight += product.quantity * element.product.weight;\r\n      maxDistance = element.product.distance > maxDistance ? element.product.distance : maxDistance;\r\n      products.push(product);\r\n    });\r\n\r\n    const data = JSON.stringify({products: products, weight: totalWeight, distance: maxDistance});\r\n    \r\n    const response = await fetch('https://stripe-server-tdelapierre.herokuapp.com/create-checkout-session', {\r\n      method: 'POST',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: data\r\n    });\r\n  \r\n    const session = await response.json();\r\n    \r\n    \r\n    const result = await stripe.redirectToCheckout({\r\n      sessionId: session.id,\r\n    });\r\n    \r\n\r\n    if (result.error) {}\r\n\r\n    this.clearCart();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider\r\n        value={{\r\n          ...this.state,\r\n          removeFromCart: this.removeFromCart,\r\n          addToCart: this.addToCart,\r\n          clearCart: this.clearCart,\r\n          checkout: this.checkout\r\n        }}\r\n      >\r\n        <Router ref={this.routerRef}>\r\n          <div className=\"App\">\r\n            <nav\r\n              className=\"navbar container\"\r\n              role=\"navigation\"\r\n              aria-label=\"main navigation\"\r\n            >\r\n              <div className=\"navbar-brand\">\r\n                <b className=\"navbar-item is-size-4 \">TP Info802</b>\r\n                <label\r\n                  role=\"button\"\r\n                  class=\"navbar-burger burger\"\r\n                  aria-label=\"menu\"\r\n                  aria-expanded=\"false\"\r\n                  data-target=\"navbarBasicExample\"\r\n                  onClick={e => {\r\n                    e.preventDefault();\r\n                    this.setState({ showMenu: !this.state.showMenu });\r\n                  }}\r\n                >\r\n                  <span aria-hidden=\"true\"></span>\r\n                  <span aria-hidden=\"true\"></span>\r\n                  <span aria-hidden=\"true\"></span>\r\n                </label>\r\n              </div>\r\n              <div className={`navbar-menu ${this.state.showMenu ? \"is-active\" : \"\"\r\n                }`}>\r\n                <Link to=\"/products\" className=\"navbar-item\">\r\n                  Articles\r\n                </Link>\r\n                <Link to=\"/cart\" className=\"navbar-item\">\r\n                  Panier\r\n                  <span\r\n                    className=\"tag is-primary\"\r\n                    style={{ marginLeft: \"5px\" }}\r\n                  >\r\n                    {Object.keys(this.state.cart).length}\r\n                  </span>\r\n                </Link>\r\n\r\n              </div>\r\n            </nav>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={ProductList} />\r\n              <Route exact path=\"/cart\" component={Cart} />\r\n              <Route exact path=\"/products\" component={ProductList} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bulma/css/bulma.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}